Index: lib/app.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:easy_localization/easy_localization.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:tesla/screens/climate_screen.dart';\r\nimport 'package:tesla/screens/intro_page.dart';\r\n\r\nclass App extends StatelessWidget {\r\n  const App({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      localizationsDelegates: context.localizationDelegates,\r\n      supportedLocales: context.supportedLocales,\r\n      locale: context.locale,\r\n      theme: ThemeData(\r\n        useMaterial3: true,\r\n      ),\r\n      home: const IntroScreen(),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/app.dart b/lib/app.dart
--- a/lib/app.dart	(revision 33a7ca41fa69ca5ab04e7f837cfabfc1f52cc024)
+++ b/lib/app.dart	(date 1687103824066)
@@ -1,7 +1,9 @@
 import 'package:easy_localization/easy_localization.dart';
 import 'package:flutter/material.dart';
 import 'package:tesla/screens/climate_screen.dart';
+import 'package:tesla/screens/home_screen.dart';
 import 'package:tesla/screens/intro_page.dart';
+import 'package:tesla/screens/lock_screen.dart';
 
 class App extends StatelessWidget {
   const App({super.key});
@@ -15,7 +17,7 @@
       theme: ThemeData(
         useMaterial3: true,
       ),
-      home: const IntroScreen(),
+      home: const HomeScreen(),
     );
   }
 }
Index: lib/screens/lock_screen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\n\r\nclass LockScreen extends StatefulWidget {\r\n  static const id = \"/lock\";\r\n\r\n  const LockScreen({super.key});\r\n\r\n  @override\r\n  State<LockScreen> createState() => _LockScreenState();\r\n}\r\n\r\nclass _LockScreenState extends State<LockScreen> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Placeholder();\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/lock_screen.dart b/lib/screens/lock_screen.dart
--- a/lib/screens/lock_screen.dart	(revision 33a7ca41fa69ca5ab04e7f837cfabfc1f52cc024)
+++ b/lib/screens/lock_screen.dart	(date 1687103568767)
@@ -1,4 +1,7 @@
-import 'package:flutter/material.dart';
+import 'package:neumorphic_ui/neumorphic_ui.dart';
+import 'package:tesla/services/constants/svg_icon.dart';
+
+import '../views/components/custom_button.dart';
 
 class LockScreen extends StatefulWidget {
   static const id = "/lock";
@@ -10,8 +13,139 @@
 }
 
 class _LockScreenState extends State<LockScreen> {
+  bool animation = false;
+
+  @override
+  void initState() {
+    draw();
+    super.initState();
+  }
+
+  void draw() async {
+    await Future.delayed(
+      const Duration(seconds: 1),
+    );
+    animation = true;
+    setState(() {});
+  }
+
   @override
   Widget build(BuildContext context) {
-    return const Placeholder();
+    return Scaffold(
+        backgroundColor: const Color(0xFF232527),
+        body: SafeArea(
+          child: Column(
+              children: [
+          /// button appBar
+          Padding(
+          padding: const EdgeInsets.only(right: 30, top: 30),
+          child: Row(
+            mainAxisAlignment: MainAxisAlignment.end,
+            children: [
+              CustomButton(
+                widget: SvgIcon.settings,
+                onPressed: () {},
+                sizeCon1h: 62,
+                sizeCon1w: 62,
+                sizeCon2h: 50,
+                sizeCon2w: 50,
+                sizeCon3h: 50,
+                sizeCon3w: 50,
+              ),
+            ],
+          ),
+        ),
+        const Spacer(flex: 2),
+        Container(
+          width: MediaQuery.of(context).size.width,
+          height: 350,
+          decoration:  BoxDecoration(
+              gradient: RadialGradient(
+                  colors: [
+                    Colors.lightBlueAccent.withOpacity(0.4),
+                    const Color.fromRGBO(0, 0, 0, 0)
+                  ]
+              )
+          ),
+          child: Stack(
+            children: [
+              AnimatedAlign(
+                alignment:
+                animation ? Alignment.topCenter : Alignment.center,
+                duration: const Duration(seconds: 2),
+                child:  const Text(
+                  "Model 3",
+                  style: TextStyle(
+                    fontSize: 40,
+                    fontWeight: FontWeight.w700,
+                    color: Colors.white,
+                  ),
+                ),
+              ),
+              AnimatedAlign(
+                alignment:
+                animation ? Alignment.bottomCenter : Alignment.center,
+                duration: const Duration(seconds: 2),
+                child: AnimatedContainer(
+                  width: animation ? MediaQuery.of(context).size.width : 250,
+                  height: animation ? 310 : 250,
+                  duration: const Duration(seconds: 2),
+                  decoration: const BoxDecoration(
+                    image: DecorationImage(
+                      image: AssetImage("assets/images/img_tesla_white_2.png"),
+                    ),
+                  ),
+                ),
+              ),
+            ],
+          ),
+        ),
+        const Spacer(flex: 2),
+        SizedBox(
+            height: 79,
+            width: 165,
+            child: Neumorphic(
+            style: NeumorphicStyle(
+            boxShape:
+            NeumorphicBoxShape.roundRect(BorderRadius.circular(40)),
+    depth: -10,
+    color: const Color(0xFF18191B),
+    shadowDarkColorEmboss: const Color.fromRGBO(0, 0, 0, 0.3),
+    shadowLightColorEmboss:
+    const Color.fromRGBO(255, 255, 255, 0.3),
+    ),
+    child: Row(
+    mainAxisAlignment: MainAxisAlignment.spaceBetween,
+    children: [
+    const Spacer(flex: 3),
+    const Text(
+    'Lock',
+    style: TextStyle(
+    fontSize: 17,
+        fontWeight: FontWeight.w600,
+        color: Colors.white),
+    ),
+      const Spacer(flex: 2),
+      CustomButton(
+        widget: Align(
+            alignment: Alignment.center, child: SvgIcon.unlock),
+        onPressed: () {},
+        sizeCon1h: 50,
+        sizeCon1w: 50,
+        sizeCon2h: 44,
+        sizeCon2w: 44,
+        sizeCon3h: 44,
+        sizeCon3w: 44,
+      ),
+      const Spacer(flex: 1),
+    ],
+    ),
+            ),
+        ),
+                const Spacer(flex:2),
+              ],
+          ),
+        ),
+    );
   }
-}
+}
\ No newline at end of file
Index: lib/screens/charge_screen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\n\r\nclass ChargeScreen extends StatefulWidget {\r\n  static const id = \"/charge\";\r\n\r\n  const ChargeScreen({super.key});\r\n\r\n  @override\r\n  State<ChargeScreen> createState() => _ChargeScreenState();\r\n}\r\n\r\nclass _ChargeScreenState extends State<ChargeScreen> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Placeholder();\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/charge_screen.dart b/lib/screens/charge_screen.dart
--- a/lib/screens/charge_screen.dart	(revision 33a7ca41fa69ca5ab04e7f837cfabfc1f52cc024)
+++ b/lib/screens/charge_screen.dart	(date 1687107084768)
@@ -1,17 +1,183 @@
 import 'package:flutter/material.dart';
+import 'package:neumorphic_ui/neumorphic_ui.dart';
+import 'package:tesla/services/constants/svg_icon.dart';
+
+void main() {
+  runApp(const MyApp());
+}
 
-class ChargeScreen extends StatefulWidget {
-  static const id = "/charge";
+class MyApp extends StatelessWidget {
+  const MyApp({super.key});
 
-  const ChargeScreen({super.key});
+  @override
+  Widget build(BuildContext context) {
+    return MaterialApp(
+      theme: ThemeData(
+        useMaterial3: true,
+      ),
+      home: const HomePage(),
+    );
+  }
+}
+
+class HomePage extends StatefulWidget {
+  const HomePage({Key? key}) : super(key: key);
 
   @override
-  State<ChargeScreen> createState() => _ChargeScreenState();
+  State<HomePage> createState() => _HomePageState();
 }
 
-class _ChargeScreenState extends State<ChargeScreen> {
+class _HomePageState extends State<HomePage> {
+  int battery = 20;
+  double currentValue = 0;
+
+  @override
+  void didChangeDependencies() {
+    super.didChangeDependencies();
+    currentValue = battery / 100;
+  }
+
   @override
   Widget build(BuildContext context) {
-    return const Placeholder();
+
+    return Scaffold(
+      body: Column(
+        children: [
+          Container(
+            decoration: const BoxDecoration(
+              gradient: LinearGradient(
+                colors: [Color(0xFF2A2D32), Color(0xFF1D1D1D)],
+              ),
+            ),
+            alignment: Alignment.center,
+            child: SizedBox(
+              height: 300,
+              width: 360,
+              child: Stack(
+                alignment: Alignment.bottomLeft,
+                children: [
+                  Stack(
+                    alignment: Alignment.bottomCenter,
+                    children: [
+                      Container(
+                        height: 125,
+                        width: battery * 3.2,
+                        decoration: const BoxDecoration(
+                          gradient: LinearGradient(
+                            begin: Alignment.topCenter,
+                            end: Alignment.bottomCenter,
+                            colors: [
+                              Color(0x00ebeefe),
+                              Color(0x808de1eb),
+                              Color(0xb28fb6e6),
+                              Color(0xff5daab3),
+                            ],
+                          ),
+                        ),
+                      ),
+                    ],
+                  ),
+                  CustomPaint(
+                    painter: BatteryIndicator(
+                      sizeX: 320,
+                      sizeY: 60,
+                      batteryPercent: battery,
+                    ),
+                    size: const Size(270, 50),
+                  ),
+                ],
+              ),
+            ),
+          ),
+          Container(
+            height: 18,
+            width: 273,
+            child: Stack(
+              children: [
+                SvgIcon.cursor,
+                SizedBox(
+                  height: 9,
+                  width: 273,
+                  child: Neumorphic(
+                    style: NeumorphicStyle(
+                      boxShape:
+                      NeumorphicBoxShape.roundRect(BorderRadius.circular(20)),
+                      depth: -9,
+                      color: const Color(0xFF1C1D20),
+                      shadowLightColorEmboss: Colors.white.withOpacity(0.9),
+                      shadowDarkColorEmboss: Colors.black,
+                    ),
+                  ),
+                ),
+              ],
+            ),
+          ),
+        ],
+      ),
+    );
   }
 }
+
+class BatteryIndicator extends CustomPainter {
+  final double sizeX;
+  final double sizeY;
+  final int batteryPercent;
+
+  BatteryIndicator(
+      {required this.sizeX, required this.sizeY, required this.batteryPercent});
+
+  @override
+  void paint(Canvas canvas, Size size) {
+    // Main Box
+    double dx = sizeX;
+    double dy = sizeY;
+    Paint paint2 = Paint()
+      ..color = Colors.blue
+    // ..imageFilter = ImageFilter.blur(sigmaX: Shadow.convertRadiusToSigma(4), sigmaY: Shadow.convertRadiusToSigma(4))
+      ..maskFilter = const MaskFilter.blur(BlurStyle.inner, 0);
+    paint2.shader = LinearGradient(
+      begin: Alignment.topCenter,
+      end: Alignment.bottomCenter,
+      colors: [const Color(0xff99ffffff).withOpacity(0.3), Colors.transparent],
+    ).createShader(Offset.zero & const Size(270, 90));
+    final mainBox = Path();
+    mainBox.moveTo(10, 10);
+    mainBox.lineTo(dx - 10, 10);
+    mainBox.lineTo(dx, 30);
+    mainBox.quadraticBezierTo(dx, dy, dx - 3, dy);
+    mainBox.lineTo(0, dy);
+    mainBox.lineTo(0, dy);
+    mainBox.lineTo(0, 30);
+    mainBox.close();
+    canvas.drawPath(mainBox, paint2);
+    double x = batteryPercent * sizeX / 100;
+    size = const Size(160, 70);
+    var rect = Offset.zero & size;
+    Paint paint1 = Paint()
+      ..maskFilter = const MaskFilter.blur(BlurStyle.inner, 0);
+    paint1.shader = const LinearGradient(
+      begin: Alignment.topCenter,
+      end: Alignment.bottomCenter,
+      stops: [0.3, 0.7],
+      colors: [
+        Color(0xFF2FB8FF),
+        Color(0xFF9EECD9),
+      ],
+    ).createShader(rect);
+    final battery = Path();
+    battery.moveTo(10, 10);
+    battery.lineTo(x - 10, 10);
+    battery.lineTo(x * 1.0, 30);
+    battery.lineTo(x * 1.0, dy);
+    battery.lineTo(0, dy);
+    battery.lineTo(0, 30);
+
+    battery.close();
+    canvas.drawPath(battery, paint1);
+  }
+
+  @override
+  bool shouldRepaint(covariant CustomPainter oldDelegate) {
+    return false;
+  }
+}
\ No newline at end of file
Index: lib/views/components/custom_button.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/views/components/custom_button.dart b/lib/views/components/custom_button.dart
new file mode 100644
--- /dev/null	(date 1687103337177)
+++ b/lib/views/components/custom_button.dart	(date 1687103337177)
@@ -0,0 +1,97 @@
+import 'package:flutter/cupertino.dart';
+
+class CustomButton extends StatelessWidget {
+  final void Function()? onPressed;
+  final Widget widget;
+  final double sizeCon1h;
+  final double sizeCon1w;
+  final double sizeCon2h;
+  final double sizeCon2w;
+  final double sizeCon3h;
+  final double sizeCon3w;
+
+  const CustomButton({
+    Key? key,
+    required this.widget,
+    required this.onPressed,
+    required this.sizeCon1h,
+    required this.sizeCon1w,
+    required this.sizeCon2h,
+    required this.sizeCon2w,
+    required this.sizeCon3h,
+    required this.sizeCon3w,
+  }) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    return CupertinoButton(
+      onPressed: onPressed,
+      child: Container(
+        height: sizeCon1h,
+        width: sizeCon1w,
+        decoration: BoxDecoration(
+          color: const Color(0xFF232527),
+          shape: BoxShape.circle,
+          boxShadow: const [
+            BoxShadow(
+              offset: Offset(3, 3),
+              blurRadius: 20,
+              color: Color(0xFF13151A),
+            ),
+            BoxShadow(
+              offset: Offset(-3, -3),
+              blurRadius: 20,
+              color: Color(0xff5D6167),
+            ),
+          ],
+          gradient: LinearGradient(
+            begin: Alignment.topLeft,
+            end: Alignment.bottomRight,
+            colors: [
+              const Color(0xff5D6167).withOpacity(0.0),
+              const Color(0xff13151A).withOpacity(1),
+            ],
+          ),
+        ),
+        child: Container(
+          height: sizeCon2h,
+          width: sizeCon2w,
+          decoration: BoxDecoration(
+            color: const Color(0xFF232527),
+            shape: BoxShape.circle,
+            gradient: LinearGradient(
+              colors: [
+                const Color(0xff545659).withOpacity(0.0),
+                const Color(0xff232629).withOpacity(1),
+              ],
+            ),
+          ),
+          child: Container(
+            height: sizeCon3h,
+            width: sizeCon3w,
+            decoration: BoxDecoration(
+              border: Border.all(
+                width: 1.8,
+                color: const Color(0xFF232527),
+              ),
+              color: const Color(0xff545659),
+              shape: BoxShape.circle,
+              gradient: LinearGradient(
+                begin: Alignment.topLeft,
+                end: Alignment.bottomRight,
+                colors: [
+                  const Color(0xff5D6167).withOpacity(0.0),
+                  const Color(0xff13151A).withOpacity(1),
+                ],
+              ),
+            ),
+            child: Align(
+              alignment: Alignment.center,
+              child: widget,
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
